(self.webpackChunk_use_midi_docs=self.webpackChunk_use_midi_docs||[]).push([[43],{2504:function(t,e,a){"use strict";a.r(e),a.d(e,{frontMatter:function(){return d},contentTitle:function(){return m},metadata:function(){return p},toc:function(){return u},default:function(){return o}});var n=a(7560),r=a(98283),i=(a(2784),a(30876)),l=["components"],d={sidebar_position:3,sidebar_label:"Midi state"},m="MIDI state",p={unversionedId:"api/state",id:"api/state",isDocsHomePage:!1,title:"MIDI state",description:"Every time a handler is called, it will get passed a midi state",source:"@site/documents/api/state.md",sourceDirName:"api",slug:"/api/state",permalink:"/use-midi/documents/api/state",editUrl:"https://github.com/tseijp/use-midi/edit/master/examples/documents/api/state.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"Midi state"},sidebar:"tutorialSidebar",previous:{title:"MIDI config",permalink:"/use-midi/documents/api/config"},next:{title:"Rmaz",permalink:"/use-midi/documents/rmaz"}},u=[{value:"MIDI Shared State",id:"midi-shared-state",children:[]},{value:"MIDI Generic State",id:"midi-generic-state",children:[]},{value:"MIDI state attributes",id:"midi-state-attributes",children:[{value:"Note state attributes",id:"note-state-attributes",children:[]}]}],s={toc:u};function o(t){var e=t.components,a=(0,r.Z)(t,l);return(0,i.kt)("wrapper",(0,n.Z)({},s,a,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"midi-state"},"MIDI state"),(0,i.kt)("p",null,"Every time a handler is called, it will get passed a midi state\nthat includes the source event and adds multiple attributes."),(0,i.kt)("h2",{id:"midi-shared-state"},"MIDI Shared State"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"State"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"target")),(0,i.kt)("td",{parentName:"tr",align:null},"True when the Midi is active")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"allowed")),(0,i.kt)("td",{parentName:"tr",align:null},"True when user gave permission to access MIDI devices")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"requested")),(0,i.kt)("td",{parentName:"tr",align:null},"True when user grant permission to access MIDI devices")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"supported")),(0,i.kt)("td",{parentName:"tr",align:null},"True when Web MIDI API is supported by the browser")))),(0,i.kt)("h2",{id:"midi-generic-state"},"MIDI Generic State"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"State"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"event")),(0,i.kt)("td",{parentName:"tr",align:null},"Raw Midi Event Object")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"target")),(0,i.kt)("td",{parentName:"tr",align:null},"Raw Event Target Object")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"type")),(0,i.kt)("td",{parentName:"tr",align:null},"Raw Midi Event type")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"active")),(0,i.kt)("td",{parentName:"tr",align:null},"True when the Midi is active")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"blocked")),(0,i.kt)("td",{parentName:"tr",align:null},"True when theM idi is blocked")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"enabled")),(0,i.kt)("td",{parentName:"tr",align:null},"True when the Midi is enabled")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"first")),(0,i.kt)("td",{parentName:"tr",align:null},"True when its the first event")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"last")),(0,i.kt)("td",{parentName:"tr",align:null},"True when its the last event")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"startTime")),(0,i.kt)("td",{parentName:"tr",align:null},"The start time of the current event")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"deltaTime")),(0,i.kt)("td",{parentName:"tr",align:null},"The delta between current and previous event")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"timeStamp")),(0,i.kt)("td",{parentName:"tr",align:null},"The timestamp of the current event")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"elapsedTime")),(0,i.kt)("td",{parentName:"tr",align:null},"Elapsed tie of the current Midi")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"init")),(0,i.kt)("td",{parentName:"tr",align:null},"Raw values when the Midi started")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"data")),(0,i.kt)("td",{parentName:"tr",align:null},"Current raw values of the Midi")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"prev")),(0,i.kt)("td",{parentName:"tr",align:null},"Previous raw values of the Midi")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"delta")),(0,i.kt)("td",{parentName:"tr",align:null},"Between current raw Midi values and previous values")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"sign")),(0,i.kt)("td",{parentName:"tr",align:null},"Direction of the delta values")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"command")),(0,i.kt)("td",{parentName:"tr",align:null},"The number of recieved Midi command code")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"channel")),(0,i.kt)("td",{parentName:"tr",align:null},"The number of recieved Midi channel number")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"noteNum")),(0,i.kt)("td",{parentName:"tr",align:null},"The number of Midi note number if recieved")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"velocity")),(0,i.kt)("td",{parentName:"tr",align:null},"The number of Midi velocity number if recieved")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"args")),(0,i.kt)("td",{parentName:"tr",align:null},"The arguments when you bind")))),(0,i.kt)("h2",{id:"midi-state-attributes"},"MIDI state attributes"),(0,i.kt)("p",null,"With the exception of xy and vxvy, all attributes bellow are common to all accesses."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const bind = useNote(state => {\n    const {\n        data\n    } = state\n})\n")),(0,i.kt)("h3",{id:"note-state-attributes"},"Note state attributes"),(0,i.kt)("p",null,"The note midi state adds a few attributes whih can help you understand the user intent."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const bind = useXXX(state = {\n    const {\n        noteNum\n    } = state\n})\n")))}o.isMDXComponent=!0}}]);