(self.webpackChunk_use_midi_docs=self.webpackChunk_use_midi_docs||[]).push([[954],{49466:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return r},contentTitle:function(){return i},metadata:function(){return s},toc:function(){return c},default:function(){return d}});var a=t(7560),u=t(98283),o=(t(2784),t(30876)),l=["components"],r={},i="TODO",s={unversionedId:"todo",id:"todo",isDocsHomePage:!1,title:"TODO",description:"Reserch Port",source:"@site/documents/todo.mdx",sourceDirName:".",slug:"/todo",permalink:"/use-midi/documents/todo",editUrl:"https://github.com/tseijp/use-midi/edit/master/examples/documents/todo.mdx",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Rmaz",permalink:"/use-midi/documents/rmaz"}},c=[{value:"Reserch Port",id:"reserch-port",children:[{value:"loopMidi",id:"loopmidi",children:[]},{value:"mk3 pad",id:"mk3-pad",children:[]}]},{value:"Reserch Event",id:"reserch-event",children:[{value:"loopMidi",id:"loopmidi-1",children:[]},{value:"mk3 pad",id:"mk3-pad-1",children:[]}]},{value:"React SyntheticEvent",id:"react-syntheticevent",children:[]},{value:"Widgets",id:"widgets",children:[]},{value:"Config",id:"config",children:[]}],p={toc:c};function d(e){var n=e.components,t=(0,u.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"todo"},"TODO"),(0,o.kt)("h2",{id:"reserch-port"},"Reserch Port"),(0,o.kt)("h3",{id:"loopmidi"},"loopMidi"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'MIDIInput {\n    connection: "open"\n    id: "\\\\\\?\\\\SWD#MMDEVAPI#MIDII_0AB1A388.P_0004#{504be32c-ccf6-4d2c-b73f-6f8b3747e22b}"\n    manufacturer: "Tobias Erichsen"\n#   name: "test [1]"\n#   onmidimessage: e=> {\u2026}\n#   onstatechange: null\n#   state: "connected"\n#   type: "input"\n    version: "1.3.0.43"\n}\nMIDIOutput {\n    connection: "closed"\n    id: "\\\\\\\\?\\\\SWD#MMDEVAPI#MIDII_0AB1A388.P_0000#{6dc23320-ab33-4ce4-80d4-bbb3ebbf2814}"\n    manufacturer: "Tobias Erichsen"\n#   name: "MIDI"\n#   onstatechange: null\n#   state: "connected"\n#   type: "output"\n    version: "1.3.0.43"\n#   send ()\n}\n')),(0,o.kt)("h3",{id:"mk3-pad"},"mk3 pad"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'MIDIInput {\n    connection: "open"\n    id: "\\\\\\\\?\\\\SWD#MMDEVAPI#MIDII_CF2C7E6B.P_0003#{504be32c-ccf6-4d2c-b73f-6f8b3747e22b}"\n    manufacturer: "Microsoft"\n    name: "LPMiniMK3 MIDI Out"\n#   onmidimessage: e=> {\u2026}\n#   onstatechange: null\n#   state: "connected"\n#   type: "input"\n}\nMIDIOutput {\n    connection: "closed"\n    id: "\\\\\\\\?\\\\SWD#MMDEVAPI#MIDII_CF2C7E6B.P_0002#{6dc23320-ab33-4ce4-80d4-bbb3ebbf2814}"\n    manufacturer: "Microsoft"\n    name: "LPMiniMK3 MIDI In"\n#   onstatechange: null\n#   state: "connected"\n#   type: "output"\n#   send ()\n}\n')),(0,o.kt)("h2",{id:"reserch-event"},"Reserch Event"),(0,o.kt)("h3",{id:"loopmidi-1"},"loopMidi"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'MIDIConnectionEvent {\n    bubbles: false\n    cancelBubble: false\n    cancelable: false\n    composed: false\n    currentTarget: MIDIAccess {inputs: MIDIInputMap, outputs: MIDIOutputMap, sysexEnabled: true, onstatechange: \u0192}\n    defaultPrevented: false\n    eventPhase: 0\n    isTrusted: true\n#   onstatechange: \u0192 change(e)\n    path: []\n#   port: MIDIInput {connection: "open", name: "test [1]", onmidimessage: \u0192, \u2026}\n    returnValue: true\n    srcElement: MIDIAccess {inputs: MIDIInputMap, outputs: MIDIOutputMap, sysexEnabled: true, onstatechange: \u0192}\n#   target: MIDIAccess {inputs: MIDIInputMap, outputs: MIDIOutputMap, sysexEnabled: true, onstatechange: \u0192}\n    timeStamp: 24185.599999999627\n#   type: "statechange"\n}\n')),(0,o.kt)("h3",{id:"mk3-pad-1"},"mk3 pad"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'MIDIConnectionEvent {\n    bubbles: false\n    cancelBubble: false\n    cancelable: false\n    composed: false\n    currentTarget: MIDIAccess {inputs: MIDIInputMap, outputs: MIDIOutputMap, sysexEnabled: true, onstatechange: \u0192}\n    defaultPrevented: false\n    eventPhase: 0\n    isTrusted: true\n#   onstatechange: \u0192 change(e)\n    path: []\n#   port: MIDIInput {connection: "open", \u2026}\n    returnValue: true\n    srcElement: MIDIAccess {inputs: MIDIInputMap, outputs: MIDIOutputMap, sysexEnabled: true, onstatechange: \u0192}\n#   target: MIDIAccess {inputs: MIDIInputMap, outputs: MIDIOutputMap, sysexEnabled: true, onstatechange: \u0192}\n    timeStamp: 54394.40000000037\n#   type: "statechange"\n}\nMIDIMessageEvent {\n    bubbles: true\n    cancelBubble: false\n    cancelable: false\n    composed: false\n    currentTarget: MIDIInput {connection: "open", name: "LPMiniMK3 MIDI Out", onmidimessage: \u0192, \u2026}\n#   data:\n        Uint8Array(3)\n        [144, 77, 0]\n    defaultPrevented: false\n    eventPhase: 0\n    isTrusted: true\n    path: []\n    returnValue: true\n    srcElement: MIDIInput {connection: "open",  name: "LPMiniMK3 MIDI Out", onmidimessage: \u0192, \u2026}\n    target: MIDIInput {connection: "open", name: "LPMiniMK3 MIDI Out", onmidimessage: \u0192, \u2026}\n    timeStamp: 618781.0999999996\n}\n')),(0,o.kt)("h2",{id:"react-syntheticevent"},"React SyntheticEvent"),(0,o.kt)("h2",{id:"widgets"},"Widgets"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"onchangevalue: onMIDI x onChange\n\noutputs: onOutput\nM => t => U\nI    h    S\nD    i    E\nI <= s <= R\n    inputs\n    onInput\n")),(0,o.kt)("p",null,"onFader, onFaderInput, onFaderOutput (-----( ))"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"vertical unipolar fader"),(0,o.kt)("li",{parentName:"ul"},"vertical bipolar fader"),(0,o.kt)("li",{parentName:"ul"},"horizontal unipolar fader"),(0,o.kt)("li",{parentName:"ul"},"horizontal bipolar fader")),(0,o.kt)("p",null,"onProgram, onProgramInput, onProgramOutput ","[0]","\nonControl, onControlInput, onControlOutput ","[1]"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"program change"),(0,o.kt)("li",{parentName:"ul"},"cc button")),(0,o.kt)("p",null,"onNote, onNoteInput, onNoteOutput ","[0][0]","[0][0]"," ","[1][2]","[3][4]","\nonNotes, onDrums, onChromaticKey, onScaleKey"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"chromatic keyboard"),(0,o.kt)("li",{parentName:"ul"},"scale keyboard"),(0,o.kt)("li",{parentName:"ul"},"drum grid"),(0,o.kt)("li",{parentName:"ul"},"midi note")),(0,o.kt)("h2",{id:"config"},"Config"),(0,o.kt)("p",null,"All"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"MIDI Channel (1 ~ 16)")),(0,o.kt)("p",null,"Controll Change Button"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"CC number"),(0,o.kt)("li",{parentName:"ul"},"On value(~ 127)"),(0,o.kt)("li",{parentName:"ul"},"Off value(0 ~)")),(0,o.kt)("p",null,"CC Button, MIDI Note"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Pad mode (Momentary, Toggle, Trigger)")),(0,o.kt)("p",null,"Keyboard"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Octave (-2 ~ 8)")),(0,o.kt)("p",null,"Program change"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Program number")),(0,o.kt)("p",null,"Drum Grid, MIDI Note"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Note (C, C#, ...B)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"useClick(state => {})\nuseChange(state => {})\n")))}d.isMDXComponent=!0}}]);